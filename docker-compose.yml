version: '3.8'

services:
  mongo_inventory: # База для инвентаря
    image: mongo:5.0
    container_name: mongo_inventory_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_inventory_data:/data/db
    restart: unless-stopped

  mongo_order: # База для заказов
    image: mongo:5.0
    container_name: mongo_order_db
    ports:
      - "27018:27017"
    volumes:
      - mongo_order_data:/data/db
    restart: unless-stopped

  inventory-service:
    build:
      context: . # Корень проекта как контекст
      dockerfile: ./inventory-service/Dockerfile # Путь к Dockerfile
    container_name: inventory_service_app
    ports:
      - "8081:8081"
    environment:
      SERVER_PORT: 8081
      MONGO_HOST: mongo_inventory
      MONGO_PORT: 27017
      MONGO_DBNAME: inventory_db
      GIN_MODE: debug
    depends_on:
      - mongo_inventory
    restart: on-failure

  order-service:
    build:
      context: . # Корень проекта как контекст
      dockerfile: ./order-service/Dockerfile # Путь к Dockerfile
    container_name: order_service_app
    ports:
      - "8082:8082"
    environment:
      SERVER_PORT: 8082
      MONGO_HOST: mongo_order
      MONGO_PORT: 27017
      MONGO_DBNAME: order_db
      INVENTORY_SERVICE_URL: http://inventory-service:8081
      GIN_MODE: debug
    depends_on:
      - mongo_order
      - inventory-service
    restart: on-failure

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: api_gateway_app
    ports:
      - "8080:8080"
    environment:
      GATEWAY_PORT: 8080
      INVENTORY_SERVICE_URL: http://inventory-service:8081
      ORDER_SERVICE_URL: http://order-service:8082
      GIN_MODE: debug
    depends_on:
      - inventory-service
      - order-service
    restart: on-failure

volumes:
  mongo_inventory_data:
  mongo_order_data: